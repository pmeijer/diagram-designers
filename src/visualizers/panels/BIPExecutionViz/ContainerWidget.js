/*globals define, WebGMEGlobal*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Wed Apr 26 2017 17:14:44 GMT-0500 (Central Daylight Time).
 */

define([
    'js/Loader/LoaderCircles',
    'css!./styles/ContainerWidget.css'
], function (LoaderCircles) {
    'use strict';

    var ContainerWidget,
        WIDGET_CLASS = 'container';

    ContainerWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;
        this._panels = [];
        this._initialize();

        this._logger.debug('ctor finished');
    };

    ContainerWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);
        this._loader = new LoaderCircles({containerElement: this._el});
    };

    ContainerWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
        // TODO: Propagate there properly..
    };

    // Adding/Removing/Updating items
    ContainerWidget.prototype.addInnerPanel = function (panel) {
        // TODO: assign these to the correct panel container.
        this._panels.push(panel);
        this._el.append(panel.$pEl);
        panel.setSize(this._el.width(), this._el.height());
    };

    ContainerWidget.prototype.populateConfigure = function (componentTypes) {
        this._el.append('<div>', {
            text: 'configure it'
        });
        // Show the selection box and return with the selected ids.
    };

    ContainerWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    // TODO: Add these
    ContainerWidget.prototype.showProgressbar = function () {
        this._loader.start();
    };

    ContainerWidget.prototype.hideProgressbar = function () {
        this._loader.stop();
    };

    ContainerWidget.prototype.destroy = function () {
        // The inner panels are destroyed by the controller.
    };

    ContainerWidget.prototype.onActivate = function () {
        this._logger.debug('ContainerWidget has been activated');
    };

    ContainerWidget.prototype.onDeactivate = function () {
        this._logger.debug('ContainerWidget has been deactivated');
    };

    return ContainerWidget;
});
