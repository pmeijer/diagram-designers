/*globals define, WebGMEGlobal, _, $*/
/*jshint browser: true*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Apr 07 2017 15:16:26 GMT-0500 (Central Daylight Time).
 */

define([
    'widgets/DiagramDesigner/DiagramDesignerWidget',
    'js/Controls/iCheckBox'
], function (DiagramDesignerWidget, ICheckBox) {
    'use strict';

    var BIPExecutionVizWidget,
        WIDGET_CLASS = 'bip-execution-viz';

    BIPExecutionVizWidget = function (params, container) {
        params = params || {};
        params.loggerName = 'gme:Widgets:ModelEditor:ModelEditorWidget';

        params.tabsEnabled = true;
        params.addTabs = false;
        params.deleteTabs = false;
        params.reorderTabs = false;
        params.gridSize = 1;
        // Routing manager is switched based on context
        params.defaultConnectionRouteManagerType = 'basic';
        params.disableConnectionRendering = true;

        this._hideAllEditToolbarBtns = true;

        DiagramDesignerWidget.call(this, container, params);
        this._lineStyleControls = false;

        container.addClass(WIDGET_CLASS);
        this.logger.debug('ModelEditorWidget ctor');
    };

    _.extend(BIPExecutionVizWidget.prototype, DiagramDesignerWidget.prototype);

    BIPExecutionVizWidget.prototype._initializeUI = function (/*containerElement*/) {
        DiagramDesignerWidget.prototype._initializeUI.apply(this, arguments);

        this._initializeFilterPanel();
    };

    BIPExecutionVizWidget.prototype._afterManagersInitialized = function () {
        //turn off item rotation
        this.enableRotate(false);
        this.enableOpenButton(true);
    };

    BIPExecutionVizWidget.prototype._initializeFilterPanel = function () {
        /**** create FILTER PANEL ****/
        this.$filterPanel = $('<div/>', {
            class: 'filterPanel no-print'
        });

        this.$filterPanel.html('<div class="header">Component Instances</div><ul class="body"></ul>');

        this.$filterHeader = this.$filterPanel.find('.header');
        this.$filterUl = this.$filterPanel.find('ul.body');

        this.$el.parent().append(this.$filterPanel);

        this.$filterPanel.hide();

        this._filterCheckboxes = {};
    };

    BIPExecutionVizWidget.prototype.addFilterItem = function (text, value, iconEl) {
        var item = $('<li/>', {
                class: 'filterItem'
            }),
            checkBox,
            self = this;

        checkBox = new ICheckBox({
            checkChangedFn: function (data, isChecked) {
                self._checkChanged(value, isChecked);
            }
        });

        item.append(iconEl.addClass('inline'));
        item.append(text);
        item.append(checkBox.el);


        this.$filterUl.append(item);

        this._refreshHeaderText();

        this._filterCheckboxes[value] = checkBox;

        return item;
    };

    BIPExecutionVizWidget.prototype._refreshHeaderText = function () {
        var all = this.$filterUl.find('.iCheckBox').length,
            on = this.$filterUl.find('.iCheckBox.checked').length;

        this.$filterHeader.html('FILTER' + (all === on ? '' : ' *'));
    };

    BIPExecutionVizWidget.prototype._checkChanged = function (value, isChecked) {
        this._refreshHeaderText();
        this.logger.debug('CheckBox checkChanged: ' + value + ', checked: ' + isChecked);
        this.onCheckChanged(value, isChecked);
    };

    BIPExecutionVizWidget.prototype.setChecked = function (value, isChecked) {
        if (this._filterCheckboxes[value]) {
            this._filterCheckboxes[value].setChecked(isChecked);
        }
    };

    BIPExecutionVizWidget.prototype.onCheckChanged = function (/*value, isChecked*/) {
        this.logger.warn('CrosscutWidget.onCheckChanged(value, isChecked) is not overridden!');
    };


    return BIPExecutionVizWidget;
});
